# -*- coding: utf-8 -*-
"""
문1) step01에서 작성한 'final_texts.txt' 파일을 대상으로 아래와 같은 조건과 
    <출력결과>를 참고하여 문서단어행렬(DTM)을 만드시오.    

 <조건1> 단어 가중치 방법 : TFiDF  
 <조건2> max features = 10   
 
 <출력결과>
 [[0.         0.         0.39114171 0.         0.48481007 0.
   0.         0.         0.         0.78228342]
  [0.70710678 0.         0.         0.         0.         0.
   0.         0.70710678 0.         0.        ]
  [0.         0.4695148  0.4695148  0.         0.         0.
   0.         0.         0.5819515  0.4695148 ]
  [0.         0.         0.         0.57735027 0.         0.57735027
   0.57735027 0.         0.         0.        ]
  [0.         1.         0.         0.         0.         0.
   0.         0.         0.         0.        ]]   
"""

from sklearn.feature_extraction.text import TfidfVectorizer

# 1. 파일 읽기 
path = r'C:/ITWILL/3_TextMining/TextMining/data'
file = open(file=path + '/final_texts.txt', mode='r')
texts = file.readlines() 
print(texts)
file.close()

# 2. 단어 생성기 
tfidf = TfidfVectorizer()
fit = tfidf.fit(texts) 
voca = fit.vocabulary_
print(voca)
'''
{'우리나라': 9, '대한민국': 2, '만세': 4, '비아그라': 7, 
 'gram': 0, '정력': 12, '최고': 13, '나는': 1, '사람': 8, 
 '보험료': 6, '원에': 10, '평생': 14, '보장': 5, 
 '마감': 3, '임박': 11, '홍길동': 15}
'''
# 3. 문서단어행렬(dtm)
dtm = tfidf.fit_transform(texts)
print(dtm)
'''
  (0, 4)	0.48481007054026604
  (0, 2)	0.39114171229945355
  (0, 9)	0.7822834245989071
  (1, 13)	0.5
  (1, 12)	0.5
  (1, 0)	0.5
  (1, 7)	0.5
  (2, 8)	0.58195149786718
  (2, 1)	0.4695148042146437
  (2, 2)	0.4695148042146437
  (2, 9)	0.4695148042146437
  (3, 11)	0.40824829046386296
  (3, 3)	0.40824829046386296
  (3, 5)	0.40824829046386296
  (3, 14)	0.40824829046386296
  (3, 10)	0.40824829046386296
  (3, 6)	0.40824829046386296
  (4, 15)	0.7782829228046183
  (4, 1)	0.6279137616509933
'''

# 4. numpy 배열 변환  
dtm_arr = dtm.toarray()
print(dtm_arr)
'''
[[0.         0.         0.39114171 0.         0.48481007 0.
  0.         0.         0.         0.78228342 0.         0.
  0.         0.         0.         0.        ]
 [0.5        0.         0.         0.         0.         0.
  0.         0.5        0.         0.         0.         0.
  0.5        0.5        0.         0.        ]
 [0.         0.4695148  0.4695148  0.         0.         0.
  0.         0.         0.5819515  0.4695148  0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.         0.40824829 0.         0.40824829
  0.40824829 0.         0.         0.         0.40824829 0.40824829
  0.         0.         0.40824829 0.        ]
 [0.         0.62791376 0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.77828292]]
'''

# TFiDF 에서 로그취하는 과정 확인해보기 

import numpy as np # np.log() 써보려고

np.log(1)  #>> 0 
np.log(1/2) # >> -0.6931471805599453

help(np.log1p) 
# log(1+x)

np.log1p(1) # >> 0.6931471805599453
np.log(1/2) # >> -0.6931471805599453

TF = 1 # 단어 출연 횟수
DF = 1 # Doc 출연 횟수 
iDF = 1/(DF+1) 
print(iDF) # >> 0.5
TFiDF = 2 * np.log1p(iDF) 
print(TFiDF) # >> 0.8109302162163288
